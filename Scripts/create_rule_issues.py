import subprocess
import os
import sys

def get_modified_files():
    """Get the list of modified files in Tuning/."""
    result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'], stdout=subprocess.PIPE)
    modified_files = result.stdout.decode().splitlines()
    
    # Filter files that are in the Tuning/ directory
    tuning_files = [file for file in modified_files if file.startswith('Tuning/')]
    
    return tuning_files

def extract_rule_id(file_path):
    """Extract the rule_id from the file."""
    with open(file_path, 'r') as file:
        for line in file:
            if line.startswith('rule_id:'):
                return line.split(':')[1].strip()
    return None

def create_github_issue(rule_id, file_path):
    """Create a GitHub issue using the GitHub CLI."""
    issue_title = f"Rule ID: {rule_id} updated in {file_path}"
    issue_body = f"## Rule ID: {rule_id}\nðŸ“„ **File:** `{file_path}`\nðŸ”„ **Changes detected in the tuning file.**\n\n### Auto-generated by GitHub Actions ðŸš€"
    
    # Create the GitHub issue
    subprocess.run([
        'gh', 'issue', 'create',
        '--title', issue_title,
        '--body', issue_body,
        '--label', 'tuning'
    ])

def check_existing_issue(rule_id):
    """Check if an issue already exists for this rule_id."""
    result = subprocess.run(['gh', 'issue', 'list', '--search', rule_id, '--json', 'title', '--jq', '.[].title'], stdout=subprocess.PIPE)
    existing_issues = result.stdout.decode().splitlines()
    
    for issue in existing_issues:
        if rule_id in issue:
            return True
    return False

def main():
    modified_files = get_modified_files()
    
    if not modified_files:
        print("No files modified in Tuning/. Exiting...")
        sys.exit(0)
    
    for file in modified_files:
        print(f"Processing file: {file}")
        
        rule_id = extract_rule_id(file)
        
        if not rule_id:
            print(f"No rule_id found in {file}. Skipping...")
            continue
        
        if check_existing_issue(rule_id):
            print(f"Issue for Rule ID: {rule_id} already exists. Skipping creation.")
        else:
            print(f"Creating new issue for Rule ID: {rule_id}")
            create_github_issue(rule_id, file)

if __name__ == '__main__':
    main()
